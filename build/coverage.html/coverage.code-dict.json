{"/home/travis/build/npmtest/node-npmtest-nixt/test.js":"/* istanbul instrument in package npmtest_nixt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nixt/lib.npmtest_nixt.js":"/* istanbul instrument in package npmtest_nixt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nixt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nixt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nixt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nixt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nixt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nixt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nixt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nixt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nixt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nixt.__dirname + '/lib.npmtest_nixt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/index.js":"module.exports = process.env.NIXT_COV\n  ? require('./lib-cov/nixt')\n  : require('./lib/nixt');\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt.js":"/**\n * Primary exports.\n */\n\nmodule.exports = require('./nixt/runner');\nmodule.exports.register = require('./nixt/plugin');\nmodule.exports.version = require('../package.json').version;\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/runner.js":"/**\n * External dependencies.\n */\n\nvar clone = require('clone');\nvar spawn = require('child_process').spawn;\n\n/**\n * Internal dependencies.\n */\n\nvar Batch = require('./batch');\nvar World = require('./world');\nvar expect = require('./expectations');\nvar middlewares = require('./middlewares');\nvar Result = require('./result');\nvar respond = require('./respond');\n\n/**\n * The primary entry point for every Nixt test.\n * It provides public interface that the users will interact with.\n * Every `Runner` instance can be cloned and this way one can build\n * the so called \"templates\".\n *\n * Options:\n *\n *  - colors: default - true,       Strip colors from stdout and stderr when `false`\n *  - newlines: default - true,     Strip new lines from stdout and stderr when `false`\n *\n * Examples:\n *\n *  Instantiating the class:\n *\n *    nixt() // -> Runner\n *    new nixt // -> Runner\n *\n *  Simple stdout assertion:\n *\n *    nixt({ colors: false, newlines: false })\n *    .exec('todo clear')\n *    .exec('todo Buy milk')\n *    .run('todo ls')\n *    .stdout('Buy milk')\n *    .end(fn);\n *\n *  Stdout assertion:\n *\n *    nixt({ colors: false, newlines: false })\n *    .exec('todo clear')\n *    .run('todo')\n *    .stderr('Please enter a todo')\n *    .end(fn);\n *\n *  So repeating \"todo clear\" is simply ugly. You can avoid this by\n *  creating a \"template\".\n *\n *    var todo = nixt().before(clearTodos);\n *\n *  Later on:\n *\n *    todo.clone().exec...\n *\n * For more examples check the \"README\" file.\n *\n * @see Batch\n * @param {Object} options\n * @constructor\n */\n\nfunction Runner(options) {\n  if (!(this instanceof Runner)) return new Runner(options);\n  options = options || {};\n  this.options = options;\n  this.batch = new Batch;\n  this.world = new World;\n  this.expectations = [];\n  this.prompts = [];\n  this.responses = [];\n  this.baseCmd = '';\n  this.standardInput = null;\n}\n\n/**\n * Register a before filter.\n *\n * @param {Function} fn\n * @returns {Runner} for chaining\n * @see Batch#addBefore\n * @api public\n */\n\nRunner.prototype.before = function(fn) {\n  this.batch.addBefore(fn);\n  return this;\n};\n\n/**\n * Register an after filter.\n *\n * @param {Function} fn\n * @returns {Runner} for chaining\n * @see Batch#addAfter\n * @api public\n */\n\nRunner.prototype.after = function(fn) {\n  this.batch.addAfter(fn);\n  return this;\n};\n\n/**\n * Set the current working directory for\n * the command that will be executed.\n *\n * @param {String} path\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.cwd = function(path) {\n  this.world.cwd = path;\n  return this;\n};\n\n/**\n * Specify a base command.\n *\n * Very convenient when testing the same executable\n * again and again.\n *\n * @param {String} command\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.base = function(cmd) {\n  this.baseCmd = cmd;\n  return this;\n};\n\n/**\n * Set data to pass to stdin.\n *\n * @param {String} data\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.stdin = function(data) {\n  this.standardInput = data || '';\n  return this;\n};\n\n/**\n * Set environment variable.\n *\n * @param {String} key\n * @param {String} value\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.env = function(key, val) {\n  this.world.env[key] = val;\n  return this;\n};\n\n/**\n * Specify a command to run.\n *\n * @param {String} command\n * @returns {Runner} for chaining\n * @see Batch#main\n * @api public\n */\n\nRunner.prototype.run = function(cmd, fn) {\n  this.batch.main(this.execFn(this.baseCmd + cmd));\n  if (fn) this.end(fn);\n  return this;\n};\n\n/**\n * Force an execution timeout.\n *\n * @param {Number} ms\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.timeout = function(ms) {\n  this.world.timeout = ms;\n  this.expect(expect.time(ms));\n  return this;\n};\n\n/**\n * Register a \"stdout\" expectation.\n *\n * @param {Regex|String} pattern\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.stdout = function(pattern) {\n  this.expect(expect.stdout(pattern));\n  return this;\n};\n\n/**\n * Register a \"stderr\" expectation.\n *\n * @param {Regex|String} pattern\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.stderr = function(pattern) {\n  this.expect(expect.stderr(pattern));\n  return this;\n};\n\n/**\n * Register an exit code expectation.\n *\n * @param {Number} code\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.code = function(code) {\n  this.expect(expect.code(code));\n  return this;\n};\n\n/**\n * Check if a file or a directory exists.\n *\n * @param {String} path\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.exist = function(path) {\n  this.expect(expect.exists(path));\n  return this;\n};\n\n/**\n * Match the content of a file.\n *\n * @param {Regex|String} pattern\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.match = function(file, pattern) {\n  this.expect(expect.match(file, pattern));\n  return this;\n};\n\n/**\n * Create a new directory.\n *\n * @param {String} path\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.mkdir = function(path) {\n  this.batch.add(middlewares.mkdir(path));\n  return this;\n};\n\n/**\n * Execute a command.\n *\n * @param {String} command\n * @param {World} world - env vars, cwd\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.exec = function(cmd, world) {\n  world = world || this.world;\n  this.batch.add(middlewares.exec(cmd, world));\n  return this;\n};\n\n/**\n * Create a new file with the given `content`.\n *\n * @param {String} path\n * @param {String} data [optional]\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.writeFile = function(path, data) {\n  this.batch.add(middlewares.writeFile(path, data));\n  return this;\n};\n\n/**\n * Remove a directory.\n *\n * @param {String} path\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.rmdir = function(path) {\n  this.batch.add(middlewares.rmdir(path));\n  return this;\n};\n\n/**\n * Remove a file.\n *\n * @param {String} path\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.unlink = function(path) {\n  this.batch.add(middlewares.unlink(path));\n  return this;\n};\n\n/**\n * Register an interactive prompt\n *\n * @param {Regex|String} pattern\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.on = function(pattern) {\n  this.prompts.push(pattern);\n  return this;\n};\n\n/**\n * Register an interactive prompt response\n *\n * @param {String} response\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.respond = function(response) {\n  this.responses.push(response);\n  return this;\n};\n\n/**\n * Run the test.\n *\n * @param {Function} fn\n * @returns {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.end = function(fn) {\n  if (!this.batch.hasMain()) {\n    throw new Error('Please provide a command to run. Hint: `nixt#run`');\n  }\n  this.batch.run(fn);\n};\n\n/**\n * Clone the runner. Give basic support for templates.\n *\n * @returns {Runner} clone of the current instance\n * @api public\n */\n\nRunner.prototype.clone = function() {\n  return clone(this, false);\n};\n\n/**\n * Register an expectation.\n *\n * @param {Function} fn\n * @api public\n */\n\nRunner.prototype.expect = function(fn) {\n  this.expectations.push(fn);\n  return this;\n};\n\n/**\n * Return a function that will execute\n * the command.\n *\n * @returns {Function}\n * @api private\n */\n\nRunner.prototype.execFn = function(cmd) {\n  var self = this;\n  var args = require('shell-quote').parse(cmd);\n  var bin = args.shift(0);\n\n  return function(fn) {\n    // Allow .run('') without attempting\n    if (cmd === '') { fn(undefined); return; }\n\n    var child = spawn(bin, args, self.world);\n    var stdout = '';\n    var stderr = '';\n    var err;\n\n    if (self.standardInput != null) {\n      child.stdin.end(self.standardInput);\n    }\n\n    if (self.world.timeout) {\n      setTimeout(function() {\n        child.kill();\n        err = { killed: true };\n      }, self.world.timeout);\n    }\n\n    respond.run(child.stdout, child.stdin, self.prompts, self.responses);\n\n    child.stdout.on('data', function(data) { stdout += data; });\n    child.stderr.on('data', function(data) { stderr += data; });\n\n    child.on('close', function(code) {\n      var error = null;\n      var result = new Result(cmd, code, self.options).parse(stdout, stderr, err);\n\n      for (var i = 0, len = self.expectations.length; i < len; i++) {\n        error = self.expectations[i](result);\n        if (error) break;\n      }\n\n      fn(error);\n    });\n  };\n};\n\n/**\n * Primary export.\n */\n\nmodule.exports = Runner;\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/batch.js":"/**\n * Batch - maintain the registered middlewares & expectations.\n *\n * `Batch` is being used by `Runner`. The main role of it is to\n * maintain the correct order of the registered middlewares and the expectations.\n *\n * In order to support \"templates\" `Batch` tries to encapsulate the mechanics\n * behind that. There are a few rules that one should keep in mind:\n *\n * - `addBefore` always adds at the end of the 'before' list\n * - `addAfter` always adds at the end of the 'after' list\n * - `add` adds either after the before list or before the after list depending if a \"main\"\n *   function has been registered or not.\n *\n * The following example will (hopefully) illustrate how this class works:\n *\n *    var batch = new Batch;\n *    batch.addBefore(before1) --> execution order [before1]\n *    batch.addBefore(before2) --> execution order [before1, before2]\n *    batch.addAfter(after1)   --> execution order [before1, before2, after1]\n *    batch.add(fn1)           --> execution order [before1, before2, fn1, after1]\n *    batch.main(main)         --> execution order [before1, before2, fn1, main, after1]\n *    batch.add(fn2)           --> execution order [before1, before2, fn1, main, fn2, after1]\n *    batch.add(before3)       --> execution order [before1, before2, before3, fn1, main, fn2, after1]\n *\n *\n * So why is this even useful? It's useful when you want to implement some sort of a template.\n * Imagine the following case - you always want to perform \"setup\" and \"teardown\" for some\n * app. In this particular case we'll discuss \"todo\" (npm install todo). Todo works with a simple\n * json file which happens to be its database. So if you were testing it you would want to start\n * with a clean state each and every time. Here is how you could accomplish that:\n *\n *    var todo = nixt()\n *      .before(createBlankDatabase);\n *      .after(removeTheDatabase);\n *\n * Now you can put this in a helper function for your tests:\n *\n *    function todoApp() {\n *      return todo.clone();\n *    }\n *\n * And now every time when you need to create a new instance you can do so by calling the simple\n * helper method that you have created. Of course there are many ways to accomplish the same, but\n * nixt gives you the ability to keep everything simple.\n *\n * @constructor\n */\n\nfunction Batch() {\n  this.before = [];\n  this.afterBefore = [];\n  this.after = [];\n  this.beforeAfter = [];\n  this.fn = null;\n}\n\n/**\n * Push `fn` into the before list.\n *\n * @param {Function} fn\n * @api public\n */\n\nBatch.prototype.addBefore = function(fn) {\n  this.before.push(fn);\n};\n\n/**\n * Push `fn` into the after list.\n *\n * @param {Function} fn\n * @api public\n */\n\nBatch.prototype.addAfter = function(fn) {\n  this.after.push(fn);\n};\n\n/**\n * Register a function in either the \"after before\" list\n * or in the \"before after\" list, depending if a \"main\"\n * function exists.\n *\n * @see Batch#hasMain\n * @see Batch#main\n * @param {Function} fn\n * @api public\n */\n\nBatch.prototype.add = function(fn) {\n  (this.hasMain() ? this.beforeAfter : this.afterBefore).push(fn);\n};\n\n/**\n * Register a \"main\" function.\n *\n * @param {Function} fn\n * @api public\n */\n\nBatch.prototype.main = function(fn) {\n  this.fn = fn;\n};\n\n/**\n * Return if there is a main function or not.\n *\n * @returns {Boolean}\n * @api public\n */\n\nBatch.prototype.hasMain = function() {\n  return !!this.fn;\n};\n\n/**\n * Execute all registered functions. Keep in mind that the result of\n * the \"main\" function will be supplied to the last callback.\n *\n * @param {Function} last fn to execute\n * @api public\n */\n\nBatch.prototype.run = function(fn) {\n  var err = null;\n  var main = this.fn;\n  var batch = this.before.slice(0).concat(this.afterBefore);\n\n  batch.push(function(next) {\n    main(function(e) { err = e; next(); });\n  });\n\n  batch = batch.concat(this.beforeAfter).concat(this.after);\n\n  batch.push(function() {\n    fn(err);\n  });\n\n  function next() {\n    var fn = batch.shift();\n    if (!fn) return;\n    if (fn.length) return fn(next);\n    fn();\n    next();\n  }\n\n  next();\n};\n\n/**\n * Primary exports.\n */\n\nmodule.exports = Batch;\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/world.js":"/**\n * External dependencies.\n */\n\nvar clone = require('clone');\n\n/**\n * Contain the environment variables and the\n * current working directory for commands.\n *\n * @param {Object} env\n * @param {String} cwd\n * @constructor\n */\n\nfunction World(env, cwd) {\n  this.env = env || clone(process.env);\n  this.cwd = cwd;\n  this.timeout = null;\n}\n\n/**\n * Primary export.\n */\n\nmodule.exports = World;\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/expectations.js":"/**\n * Core dependencies.\n */\n\nvar fs = require('fs');\n\n/**\n * External dependencies.\n */\n\nvar AssertionError = require('assertion-error');\n\n/**\n * Return an exit code expectation.\n *\n * @param {Number} expected exit code.\n * @returns {Function}\n * @api public\n */\n\nexports.code = function(code) {\n  return function(result) {\n    if (code !== result.code) {\n      var message = 'Expected exit code: \"' + code + '\", actual: \"' + result.code + '\"';\n      return error(result, message, code, result.code);\n    }\n  };\n};\n\n/**\n * Return no timeout expectation.\n *\n * @returns {Function}\n * @api public\n */\n\nexports.time = function() {\n  return function(result) {\n    if (result.killed) {\n      return error(result, 'Command execution terminated (timeout)');\n    }\n  };\n};\n\n/**\n * Return a stderr expectation.\n *\n * @param {String|RegExp} expected string or regular express to match\n * @returns {Function}\n * @api public\n */\n\nexports.stderr = function(expected) {\n  return function(result) {\n    return assertOut('stderr', expected, result);\n  };\n};\n\n/**\n * Return a stdout expectation.\n *\n * @param {String|RegExp} expected string or regular express to match\n * @returns {Function}\n * @api public\n */\n\nexports.stdout = function(expected) {\n  return function(result) {\n    return assertOut('stdout', expected, result);\n  };\n};\n\n/**\n * Verify that a `path` exists.\n *\n * @param {String} path\n * @returns {Function}\n * @api public\n */\n\nexports.exists = function(path) {\n  return function(result) {\n    if (fs.existsSync(path) !== true) {\n      return error(result, 'Expected \"' + path + '\" to exist.');\n    }\n  };\n};\n\n/**\n * Verify that `path`'s data matches `data`.\n *\n * @param {String} path\n * @param {String|RegExp} data\n * @returns {Function}\n * @api public\n */\n\nexports.match = function(path, data) {\n  return function(result) {\n    var contents = fs.readFileSync(path, { encoding: 'utf8' });\n    var statement = data instanceof RegExp\n      ? data.test(contents)\n      : data === contents;\n\n    if (statement !== true) {\n      var message = 'Expected \"' + path + '\" to match \"' + data + '\", but it was: \"' + contents + '\"';\n      return error(result, message, data, contents);\n    }\n  };\n};\n\n/**\n * Assert stdout or stderr.\n *\n * @param {String} stdout/stderr\n * @param {Mixed} expected\n * @param {Result} result\n * @returns {AssertionError|null}\n * @api private\n */\n\nfunction assertOut(key, expected, result) {\n  var actual = result[key];\n  var statement = expected instanceof RegExp\n    ? expected.test(actual)\n    : expected === actual;\n\n  if (statement !== true) {\n    var message = 'Expected ' + key +' to match \"' + expected + '\". Actual: \"' + actual + '\"';\n    return error(result, message, expected, actual);\n  }\n}\n\n/**\n * Create and return a new `AssertionError`.\n * It will assign the given `result` to it, it will also prepend the executed command\n * to the error message.\n *\n * Assertion error is a constructor for test and validation frameworks that implements\n * standardized Assertion Error specification.\n *\n * For more info go visit https://github.com/chaijs/assertion-error\n *\n * @param {Result} result\n * @param {String} error message\n * @returns {AssertionError}\n * @api private\n */\n\nfunction error(result, message, expected, actual) {\n  var err = new AssertionError('`' + result.cmd + '`: ' + message);\n  err.result = result;\n  if (expected) err.expected = expected;\n  if (actual) err.actual = actual;\n  return err;\n}\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/middlewares.js":"/**\n * Core dependencies.\n */\n\nvar exec = require('child_process').exec;\nvar fs = require('fs');\n\n/**\n * Asynchronous mkdir(2).\n *\n * @param {String} path\n * @returns {Function} middleware\n * @see fs#mkdir\n * @api public\n */\n\nexports.mkdir = function(path) {\n  return function(next) {\n    fs.mkdir(path, done(next));\n  };\n};\n\n/**\n * Asynchronously writes data to a file, replacing the file if it already exists.\n * `data` can be a string or a buffer.\n *\n * @param {String} path\n * @param {Buffer|String} data\n * @returns {Function} middleware\n * @see fs#writeFile\n * @api public\n */\n\nexports.writeFile = function(path, data) {\n  return function(next) {\n    fs.writeFile(path, data, done(next));\n  };\n};\n\n/**\n * Asynchronous rmdir(2).\n *\n * @param {String} path\n * @returns {Function} middleware\n * @see fs#rmdir\n * @api public\n */\n\nexports.rmdir = function(path) {\n  return function(next) {\n    fs.rmdir(path, done(next));\n  };\n};\n\n/**\n * Asynchronous unlink(2).\n *\n * @param {String} path\n * @returns {Function} middleware\n * @see fs#unlink\n * @api public\n */\n\nexports.unlink = function(path) {\n  return function(next) {\n    fs.unlink(path, done(next));\n  };\n};\n\n/**\n * Run a command in a shell.\n *\n * @param {String} the command to run\n * @param {String} cwd\n * @returns {Function} middleware\n * @see child_process#exec\n * @api public\n */\n\nexports.exec = function(cmd, world) {\n  return function(next) {\n    exec(cmd, world, next);\n  };\n};\n\n/**\n * Callback generator for middlewares. Throw errors if any.\n *\n * @param {Function} next\n * @returns {Function}\n * @api public\n */\n\nfunction done(next) {\n  return function(err) {\n    if (err) throw err;\n    next();\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/result.js":"/**\n * Simple object that contains the result\n * of command executions.\n *\n * @constructor\n */\n\nfunction Result(cmd, code, options) {\n  options = options || {};\n  this.options = options;\n  this.code = code;\n  this.cmd = cmd;\n}\n\n/**\n * Normalize the command-line result.\n *\n * @param {String} stdout\n * @param {String} stderr\n * @returns {Result} self\n * @api public\n */\n\nResult.prototype.parse = function(stdout, stderr, err) {\n  this.err = err;\n  this.code = err ? err.code : this.code;\n  this.killed = err && err.killed;\n  this.stdout = this.strip(stdout);\n  this.stderr = this.strip(stderr);\n  return this;\n};\n\n/**\n * `Result#strip` will do the following:\n *\n * - Remove the last new line symbol from the string (always)\n * - Strip new lines (optional, see `options`)\n * - Strip colors (optional, see `options`)\n *\n * Acknowledgments:\n *\n *  - StripColorCodes - MIT License\n *\n * @param {String} str\n * @returns {String}\n * @api private\n */\n\nResult.prototype.strip = function(str) {\n  str = str.replace(/\\r?\\n$/, '');\n\n  if (this.options.newlines === false) {\n    str = str.replace(/\\r?\\n/g, '');\n  }\n\n  if (this.options.colors === false) {\n    str = str.replace(/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g, '');\n  }\n\n  return str;\n};\n\n/**\n * Primary export.\n */\n\nmodule.exports = Result;\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/respond.js":"/**\n * External dependencies.\n */\n\nvar S = require('string');\n\n/**\n * Read interactive prompts on a stream and\n * write the associated response to another\n *\n * Largely borrowed from @jprichardson's module \"node-suppose\"\n * https://github.com/jprichardson/node-suppose/\n *\n * @param {Stream} Readable Stream to listen for prompts on.\n * @param {Stream} Writable Stream to write respones to.\n * @param {Array} An array of prompts {Regex|String}\n * @param {Array} An array of responses {String}\n * @api public\n */\n\nexports.run = function(readable, writable, expects, responses) {\n  var needNew = true, buffer = '', match = false;\n  var expect = '', response = '';\n\n  readable.on('data', function(data){\n    buffer += data.toString();\n    if (needNew) {\n      expect = expects.shift();\n      response = responses.shift();\n      needNew = false;\n    }\n\n    if (typeof expect === 'string') {\n      match = S(buffer).endsWith(expect);\n    } else if (typeof expect === 'object') {\n      match = (buffer.match(expect) != null);\n    }\n\n    if (match) {\n      needNew = true;\n      writable.write(response);\n      match = false;\n\n      if (expects.length === 0 && responses.length === 0) {\n        writable.end();\n      }\n    }\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/lib/nixt/plugin.js":"/**\n * Internal dependencies.\n */\n\nvar Runner = require('./runner');\n\n/**\n * Primitive plugin support.\n *\n * It will add the supplied `fn to Runner's prototype.\n *\n * Examples:\n *\n * Register a single function, could be both middleware or expectation:\n *\n *    nixt.register('stdoutNotEqual', fn);\n *\n * Later on this can be used as you would expect:\n *\n *    nixt()\n *    .run('ls /tmp')\n *    .stdoutNotEqual('xxx')\n *    .end()\n *\n * In case you want to register more than one function at once you may want to pass\n * an object:\n *\n *    nixt.register({\n *      name: fn,\n *      otherName: fn2,\n *      etc: etc,\n *    });\n *\n * The second example might come handy when developing plugins. Keep in mind that\n * the plugin system will most certainly change in future version (prior hitting 1.0.0).\n * The current implementation has some obvious problems like what plugin developers\n * will do if they happen to use the same function name. Any ideas and suggestions\n * are more than welcome.\n *\n * @param {String|Object} name\n * @param {Function} fn\n * @api public\n */\n\nmodule.exports = function(name, fn) {\n  var reg = null;\n\n  if (Object(name) !== name) {\n    reg = Object.create(null);\n    reg[name] = fn;\n  } else {\n    reg = name;\n  }\n\n  Object.keys(reg).forEach(function(key) {\n    Runner.prototype[key] = reg[key];\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-nixt/node_modules/nixt/hydro.conf.js":"/**\n * External dependencies.\n */\n\nvar join = require('path').join;\n\n/**\n * Internal dependencies.\n */\n\nvar nixt = require('./');\n\n/**\n * Nixt template that has the fixtures dir as a CWD.\n *\n * @returns {Object}\n * @api public\n */\n\nfunction nfixt() {\n  return nixt().cwd(join(__dirname, 'test', 'fixtures'));\n}\n\n/**\n * Test setup.\n *\n * @param {Object} hydro\n * @api public\n */\n\nmodule.exports = function(hydro) {\n  hydro.set({\n    formatter: 'hydro-dot',\n    globals: {\n      nfixt: nfixt,\n    },\n    chai: {\n      styles: 'should',\n      stack: true,\n    },\n    tests: [\n      'test/*.test.js'\n    ],\n    plugins: [\n      'hydro-chai',\n      'hydro-bdd',\n    ],\n  });\n};\n"}